@startuml
Actor User
participant Parser
participant CheckCurrentCommand
participant "original_list: ActivityList" as original_list
participant ActivityList
participant Collections
participant Task
participant Ui

User -> Parser: input "checkCurrent"
activate Parser
create CheckCurrentCommand
Parser -> CheckCurrentCommand: new CheckCurrentCommand(input)
activate CheckCurrentCommand
CheckCurrentCommand --> Parser
deactivate CheckCurrentCommand
Parser --> User
deactivate Parser

User -> CheckCurrentCommand: execute
activate CheckCurrentCommand
CheckCurrentCommand -> CheckCurrentCommand: getClosestTasks
activate CheckCurrentCommand
create ActivityList
CheckCurrentCommand -> ActivityList: new ActivityList<Task>
activate ActivityList
ActivityList --> CheckCurrentCommand: empty ActivityList<Task>
deactivate ActivityList
loop For activity in original ActivityList
    CheckCurrentCommand -> original_list: getActivity
    activate original_list
    original_list --> CheckCurrentCommand: activity
    deactivate original_list
    opt activity instanceof Task
        CheckCurrentCommand -> ActivityList: addActivity to ActivityList<Task>
    end
end
CheckCurrentCommand -> Collections: sort the ActivityList<Task>
activate Collections
Collections --> CheckCurrentCommand
deactivate Collections
CheckCurrentCommand --> CheckCurrentCommand: ArrayList<Task> sublist
deactivate CheckCurrentCommand

CheckCurrentCommand -> Ui: show message
loop For task in ActivityList
    CheckCurrentCommand -> Task: toString
    activate Task
    Task --> CheckCurrentCommand: return String
    deactivate Task
    CheckCurrentCommand -> Ui: show message
end

CheckCurrentCommand --> User: return false
note left: do not exit the program
deactivate CheckLecturesCommand

@enduml